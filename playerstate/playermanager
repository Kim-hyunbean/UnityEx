using UnityEngine;

public class playermanager : MonoBehaviour
{

    //공속, 공격력, 이속 기본값 100%
    [SerializeField] private float pAttackSpeed = 1f;
    [SerializeField] private float pAttackdamage = 1f;
    [SerializeField] private float pMoveSpeed = 1f;
    //체력 기본값 5
    [SerializeField] public int pHealth = 5;

    //일시정지
    public bool isPause = false;

    //연습할때 사용햇던것 필요없을시 제거
    /*[SerializeField] private int age;
    //public은 안써야하는데 값을 줘야할때
    public bool temp =  false;
    public PlayerMovement PM;*/


    private void Awake()
    {
        //start < awake 속도
    }
    void Start()
    {
        /*//자동으로 찾아줌(할당) 보편적사용
        PM = FindObjectOfType<PlayerMovement>();*/
    }



    void Update()
    {
        /*//연습할때 사용햇던것 필요없을시 제거
        //다른곳에서 값 가져오기
        temp = PM.SRender.flipX;
        //할당시키기*/

        //저주관련
        CurseSystem();

        //까까관련
        GGaGGaSystem();

        //일시정지
        IsPause();
    }

    private void FixedUpdate()
    {
        //fixedUpdate > update 프레임높음
    }

    /*//연습할때 사용햇던것 필요없을시 제거
    // 충돌감지
    private void OnTriggerEnter2D(Collider2D collision)
    {
        //충돌됫을때 최초로 한번 실행
    }

    private void OnTriggerStay2D(Collider2D collision)
    {
        //충돌됫을때 프레임마다 계속
    }

    private void OnTriggerExit2D(Collider2D collision)
    {
        //충돌에서 벗어낫을때 한번실행
    }*/

    //저주관련
    public void CurseSystem()
    {
        // 0 = 공속디버프 , 1 = 공격력디버프, 2 = 이속디버프, 3 = 체력디버프
        int rancurse = Random.RandomRange(0, 4);

        // 디버프적용수치 20%~40%
        float ranPer = Random.RandomRange(0.6f, 0.8f);
        // 소수점 둘째자리까지
        ranPer = Mathf.Round(ranPer * 100)/100;

        // 최대체력감소수치 1~2
        int ranHealth = Random.RandomRange(1, 3);

        //임시로 I를 눌럿을때 저주작동
        if (Input.GetKeyDown(KeyCode.I))
        {

            Debug.Log("저주발생");

            switch(rancurse)
            {
                case 0:

                    pAttackSpeed = pAttackSpeed * ranPer;
                    Debug.Log("공속디버프 "+ranPer+"적용");

                    break;

                case 1:

                    pAttackdamage = pAttackdamage * ranPer;
                    Debug.Log("공격력디버프 "+ranPer+"적용");

                    break;

                case 2:

                    pMoveSpeed = pMoveSpeed * ranPer;
                    Debug.Log("이속디버프 "+ranPer+"적용");

                    break;

                case 3:

                    pHealth = pHealth - ranHealth;
                    Debug.Log("체력감소 "+ranHealth+"적용");

                    if(pHealth <= 1)
                    {
                        pHealth = 1;
                    }

                    break;

                default:

                    break;
            }
        }
    }

    public void GGaGGaSystem()
    {
        // 1 = 버프 , 2 = 디버프
        int buffOrdebuff = Random.RandomRange(1, 3);

        // 0 = 공속(디)버프 , 1 = 공격력(디)버프, 2 = 이속(디)버프, 3 = 체력(디)버프
        int ranGGa = Random.RandomRange(0, 4);

        // 버프적용수치 10%~60%
        float ranBuffPer = Random.RandomRange(1.1f, 1.6f);
        // 소수점 둘째자리까지
        ranBuffPer = Mathf.Round(ranBuffPer * 100) / 100;

        // 디버프적용수치 10%~60%
        float ranDebuffPer = Random.RandomRange(0.4f, 0.9f);
        // 소수점 둘째자리까지
        ranDebuffPer = Mathf.Round(ranDebuffPer * 100) / 100;

        // 최대체력(증가)감소수치 1~3
        int ranHealth = Random.RandomRange(1, 4);

        //임시로 U를 눌럿을때 까까작동
        if (Input.GetKeyDown(KeyCode.U))
        {

            Debug.Log("까까발생");

           switch(buffOrdebuff)
            {
                //버프
                case 1:

                    switch(ranGGa)
                    {
                        case 0:

                            pAttackSpeed = pAttackSpeed * ranBuffPer;
                            Debug.Log("공속버프 " + ranBuffPer + "적용");

                            break;

                        case 1:

                            pAttackdamage = pAttackdamage * ranBuffPer;
                            Debug.Log("공격력버프 " + ranBuffPer + "적용");

                            break;

                        case 2:

                            pMoveSpeed = pMoveSpeed * ranBuffPer;
                            Debug.Log("이속버프 " + ranBuffPer + "적용");

                            break;

                        case 3:

                            pHealth = pHealth + ranHealth;
                            Debug.Log("체력증가 " + ranHealth + "적용");
                            Debug.Log(pHealth + "체력상태");
                            if (pHealth >= 10)
                            {
                                pHealth = 10;
                            }


                            break;
                    }


                    break;

                //디버프
                case 2:

                    switch (ranGGa)
                    {
                        case 0:

                            pAttackSpeed = pAttackSpeed * ranDebuffPer;
                            Debug.Log("공속디버프 " + ranDebuffPer + "적용");

                            break;

                        case 1:

                            pAttackdamage = pAttackdamage * ranDebuffPer;
                            Debug.Log("공격력디버프 " + ranDebuffPer + "적용");

                            break;

                        case 2:

                            pMoveSpeed = pMoveSpeed * ranDebuffPer;
                            Debug.Log("이속디버프 " + ranDebuffPer + "적용");

                            break;

                        case 3:

                            pHealth = pHealth - ranHealth;
                            Debug.Log("체력감소 " + ranHealth + "적용");

                            if (pHealth <= 1)
                            {
                                pHealth = 1;
                            }

                            break;
                    }


                    break;

                default :

                    break;

            }
        }
    }

    
    public void IsPause()
    {
       if(Input.GetKeyDown(KeyCode.Escape))
        {
            isPause = !isPause;
        }
 
       if(isPause)
        {
            Time.timeScale = 0f;
        }
        else
        {
            Time.timeScale = 1f;
        }
        Time.fixedDeltaTime = 0.02f * Time.timeScale;
    }

}
